package com.kingfish.show.mybatis.dao;

import com.kingfish.show.mybatis.model.Show;
import com.kingfish.show.mybatis.model.ShowExample;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

public interface ShowMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @SelectProvider(type=ShowSqlProvider.class, method="countByExample")
    long countByExample(ShowExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @DeleteProvider(type=ShowSqlProvider.class, method="deleteByExample")
    int deleteByExample(ShowExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @Delete({
        "delete from show",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @Insert({
        "insert into show (id, gmt_create, ",
        "gmt_modify, truth, ",
        "praise, product_id, ",
        "source, pics, show_time)",
        "values (#{id,jdbcType=BIGINT}, #{gmtCreate,jdbcType=TIMESTAMP}, ",
        "#{gmtModify,jdbcType=TIMESTAMP}, #{truth,jdbcType=DOUBLE}, ",
        "#{praise,jdbcType=INTEGER}, #{productId,jdbcType=BIGINT}, ",
        "#{source,jdbcType=TINYINT}, #{pics,jdbcType=VARCHAR}, #{showTime,jdbcType=TIMESTAMP})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=true, resultType=Long.class)
    int insert(Show record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @InsertProvider(type=ShowSqlProvider.class, method="insertSelective")
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=true, resultType=Long.class)
    int insertSelective(Show record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @SelectProvider(type=ShowSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="gmt_create", property="gmtCreate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="gmt_modify", property="gmtModify", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="truth", property="truth", jdbcType=JdbcType.DOUBLE),
        @Result(column="praise", property="praise", jdbcType=JdbcType.INTEGER),
        @Result(column="product_id", property="productId", jdbcType=JdbcType.BIGINT),
        @Result(column="source", property="source", jdbcType=JdbcType.TINYINT),
        @Result(column="pics", property="pics", jdbcType=JdbcType.VARCHAR),
        @Result(column="show_time", property="showTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<Show> selectByExample(ShowExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, gmt_create, gmt_modify, truth, praise, product_id, source, pics, show_time",
        "from show",
        "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="gmt_create", property="gmtCreate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="gmt_modify", property="gmtModify", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="truth", property="truth", jdbcType=JdbcType.DOUBLE),
        @Result(column="praise", property="praise", jdbcType=JdbcType.INTEGER),
        @Result(column="product_id", property="productId", jdbcType=JdbcType.BIGINT),
        @Result(column="source", property="source", jdbcType=JdbcType.TINYINT),
        @Result(column="pics", property="pics", jdbcType=JdbcType.VARCHAR),
        @Result(column="show_time", property="showTime", jdbcType=JdbcType.TIMESTAMP)
    })
    Show selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @UpdateProvider(type=ShowSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Show record, @Param("example") ShowExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @UpdateProvider(type=ShowSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") Show record, @Param("example") ShowExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @UpdateProvider(type=ShowSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Show record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table show
     *
     * @mbg.generated
     */
    @Update({
        "update show",
        "set gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},",
          "gmt_modify = #{gmtModify,jdbcType=TIMESTAMP},",
          "truth = #{truth,jdbcType=DOUBLE},",
          "praise = #{praise,jdbcType=INTEGER},",
          "product_id = #{productId,jdbcType=BIGINT},",
          "source = #{source,jdbcType=TINYINT},",
          "pics = #{pics,jdbcType=VARCHAR},",
          "show_time = #{showTime,jdbcType=TIMESTAMP}",
        "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Show record);
}